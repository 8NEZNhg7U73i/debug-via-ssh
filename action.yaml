name: "Debug via SSH test with zerotier"
description: "SSH to a GitHub Actions runner using zerotier"
branding:
  icon: "terminal"
  color: "green"
inputs:
  SSH_PASS:
    description: "Password for SSH session"
    required: true
  ZEROTIER_NETWORK_ID:
    description: "ZEROTIER Network ID Join"
    required: true
  ZEROTIER_CONFIG:
    description: "ZEROTIER Config"
    required: false
    default: ""
  ZEROTIER_SECRET:
    description: "ZEROTIER identity.secret"
    required: false
    defalut: ""
  ZEROTIER_PUBLIC:
    description: "ZEROTIER identity.public"
    required: false
    defalut: ""
  ZEROTIER_AUTHTOKEN:
    description: "ZEROTIER authtoken.secret"
    required: false
    defalut: ""
  ZEROTIER_TIMEOUT:
    description: "Timeout in seconds for ZEROTIER session"
    required: false
    default: 21000
  ZEROTIER_VERBOSE:
    description: "Set value true to show zerotier with json format"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.SSH_PASS }}" ]
        then
          echo "SSH_PASS needs to be passed in the 'with' field."
          exit 1
        fi

        if [ -z "${{ inputs.ZEROTIER_NETWORK_ID }}" ]
        then
          echo "ZEROTIER_NETWORK_ID needs to be passed in the 'with' field."
          exit 1
        fi

    - name: Meet OS specific prerequisites
      shell: pwsh
      run: |
        if('${{ runner.os }}' -eq 'Linux')
        {
          printf "# Preparing environment..."
            whoami > ssh_user
            echo /var/lib/zerotier-one > config_path
          printf " [DONE]\n\n"
          
          echo "# Change the SSH user password"
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd $(cat ssh_user)
        }
        if('${{ runner.os }}' -eq 'macOS')
        {
          printf "# Preparing environment..."
            echo "root" > ssh_user
            echo "/Library/Application Support/ZeroTier/One" > config_path
          printf " [DONE]\n\n"

          echo "# Change the SSH user password"
            echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config >/dev/null
            sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
            sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd "root"
        }
        if('${{ runner.os }}' -eq 'Windows')
        {
          printf "# Preparing environment..."
            echo $env:UserName > ssh_user
            echo C:\ProgramData\ZeroTier\One > config_path
          printf " [DONE]\n\n"
          
          echo "# Install SSH server"
            curl https://dl.bitvise.com/BvSshServer-Inst.exe --output BvSshServer-Inst.exe
            .\BvSshServer-Inst.exe -acceptEULA -defaultInstance

          printf "# Setting up the SSH server to allow access..."
            $cfg = new-object -com "BssCfg815.BssCfg815"
            $cfg.settings.SetDefaults()
            $cfg.settings.access.SetDefaults()
            $cfg.settings.access.winGroups.Clear()
            $cfg.settings.access.winGroups.new.SetDefaults()
            $cfg.settings.access.winGroups.new.loginAllowed = $true
            $cfg.settings.access.winGroups.NewCommit()
            $cfg.settings.Save()
          printf " [DONE]\n\n"

          echo "# Add Firewall rule to allow inbound TCP connection on local port 22"
            New-NetFirewallRule -Name zerotier -DisplayName 'zerotier' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

          echo "# Start the SSH server"
            net start BvSshServer

          echo "# Change the SSH user password"
            net user $env:UserName ${{ inputs.SSH_PASS }}
        }

    - name: Install zerotier
      shell: pwsh
      run: |
        echo "# Install zerotier"
        if ( ( '${{ runner.os }}' -eq 'Linux' ) -or ( '${{ runner.os}}' -eq 'macOS') ){
          Invoke-WebRequest https://install.zerotier.com -outfile Zerotier.sh
          bash Zerotier.sh
          sudo zerotier-cli listnetworks
          sudo zerotier-cli peers
          sudo zerotier-cli listpeers
        }
        if ( '${{ runner.os }}' -eq 'Windows' ){
          choco install zerotier-one --yes
          refreshenv
        }

    - name: Setup zerotier
      shell: bash
      run: |
        echo "# Set zerotier with the given network id"
        if [ ! -z "${{ inputs.ZEROTIER_SECRET }}" ]
        then
        echo ${{ inputs.ZEROTIER_SECRET }} > $(eval echo ~$(cat config_path)/identity.secret)
        fi
        if [ ! -z "${{ inputs.ZEROTIER_PUBLIC }}" ]
        then
        echo ${{ inputs.ZEROTIER_PUBLIC }} > $(eval echo ~$(cat config_path)/identity.public)
        fi
        if [ ! -z "${{ inputs.ZEROTIER_AUTHTOKEN }}" ]
        then
        echo ${{ inputs.ZEROTIER_AUTHTOKEN }} > $(eval echo ~$(cat config_path)/authtoken.secret)
        fi

    - name: Start zerotier
      shell: pwsh
      run: |
        Write-Output "# Starting zerotier..."
        Write-Output " [DONE]\n\n"
        Write-Output $( $( "$( Get-Content ssh_user )/continue" ) ) | Set-Variable -Name continue_path -PassThru
        Write-Output ${{ inputs.zerotier_TIMEOUT }} | Set-Variable -Name time -PassThru
        if ( '${{ runner.os }}' -eq 'Windows' ){
          Write-Output "C:\ProgramData\ZeroTier\One\zerotier-one_x64.exe -q" | Set-Variable -Name zerotier
        }
        if ( ( '${{ runner.os }}' -eq 'Linux' ) -or ( '${{ runner.os}}' -eq 'macOS') ){
          Write-Output "sudo zerotier-cli" | Set-Variable -Name zerotier
        }
        if ( '${{ inputs.ZEROTIER_VERBOSE }}' -eq 'true' ){
          Write-Output "-j" | Set-Variable -Name json
        }
        while ( ! ( Test-Path -Path $continue_path ) -and ( $time -gt 1  ) ){
          Set-Variable -Name HH -Value $( [math]::Floor( $time / 3600 ) )
          Set-Variable -Name MM -Value $( [math]::Floor( $time % 3600 / 60 ) )
          Set-Variable -Name SS -Value $( [math]::Floor( $time % 60 ) )
          Write-Output ""
          Write-Output ""
          Write-Output "###########################################################################"
          Write-Output "zerotier info:"
          Write-Output "###########################################################################"
          Invoke-Expression "$zerotier info $json"
          Write-Output "###########################################################################"
          Write-Output "zerotier listnetworks:"
          Write-Output "###########################################################################"
          Invoke-Expression "$zerotier listnetworks $json"
          Write-Output "###########################################################################"
          Write-Output "zerotier peers:"
          Write-Output "###########################################################################"
          Invoke-Expression "$zerotier peers $json"
          Write-Output "###########################################################################"
          Write-Output "zerotier listpeers:"
          Write-Output "###########################################################################"
          Invoke-Expression "$zerotier listpeers $json"
          Write-Output "###########################################################################"
          Write-Output "Allow workflow to continue using:"
          Write-Output "###########################################################################"
          Write-Output "bash -c touch $continue_path"
          Write-Output "###########################################################################"
          Write-Output "SSH session time left:"
          Write-Output "###########################################################################"
          Write-Output "$HH H $MM M $SS S"
          Write-Output "###########################################################################"
          Write-Output ""
          Write-Output ""
          Start-Sleep 60
          Write-Output "$($time-60)" | Set-Variable -Name time
        }
        Write-Output "# SSH session terminated. Allowing workflow to continue..."

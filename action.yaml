name: "Debug via SSH test with zerotier"
description: "SSH to a GitHub Actions runner using zerotier"
branding:
  icon: "terminal"
  color: "green"
inputs:
  SSH_PASS:
    description: "Password for SSH session"
    required: true
  ZEROTIER_NETWORK_ID:
    description: "ZEROTIER Network ID Join"
    required: true
  ZEROTIER_CONFIG:
    description: "ZEROTIER Config"
    required: false
    default: ""
  ZEROTIER_SECRET:
    description: "ZEROTIER identity.secret"
    required: false
    defalut: ""
  ZEROTIER_PUBLIC:
    description: "ZEROTIER identity.public"
    required: false
    defalut: ""
  ZEROTIER_AUTHTOKEN:
    description: "ZEROTIER authtoken.secret"
    required: false
    defalut: ""
  ZEROTIER_TIMEOUT:
    description: "Timeout in seconds for ZEROTIER session"
    required: false
    default: 21500
runs:
  using: "composite"
  steps:
    - name: Check inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.SSH_PASS }}" ]
        then
          echo "SSH_PASS needs to be passed in the 'with' field."
          exit 1
        fi

        if [ -z "${{ inputs.ZEROTIER_NETWORK_ID }}" ]
        then
          echo "ZEROTIER_NETWORK_ID needs to be passed in the 'with' field."
          exit 1
        fi

    - name: Meet OS specific prerequisites
      shell: pwsh
      run: |
        if('${{ runner.os }}' -eq 'Linux')
        {
          printf "# Preparing environment..."
            whoami > ssh_user
            echo /var/lib/zerotier-one > config_path
          printf " [DONE]\n\n"
          
          echo "# Change the SSH user password"
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd $(cat ssh_user)
        }
        if('${{ runner.os }}' -eq 'macOS')
        {
          printf "# Preparing environment..."
            echo "root" > ssh_user
            echo "/Library/Application Support/ZeroTier/One" > config_path
          printf " [DONE]\n\n"

          echo "# Change the SSH user password"
            echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config >/dev/null
            sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
            sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
            echo "${{ inputs.SSH_PASS }}`n${{ inputs.SSH_PASS }}" | sudo passwd "root"
        }
        if('${{ runner.os }}' -eq 'Windows')
        {
          printf "# Preparing environment..."
            echo $env:UserName > ssh_user
            echo C:\ProgramData\ZeroTier\One > config_path
          printf " [DONE]\n\n"
          
          echo "# Install SSH server"
            curl https://dl.bitvise.com/BvSshServer-Inst.exe --output BvSshServer-Inst.exe
            .\BvSshServer-Inst.exe -acceptEULA -defaultInstance

          printf "# Setting up the SSH server to allow access..."
            $cfg = new-object -com "BssCfg815.BssCfg815"
            $cfg.settings.SetDefaults()
            $cfg.settings.access.SetDefaults()
            $cfg.settings.access.winGroups.Clear()
            $cfg.settings.access.winGroups.new.SetDefaults()
            $cfg.settings.access.winGroups.new.loginAllowed = $true
            $cfg.settings.access.winGroups.NewCommit()
            $cfg.settings.Save()
          printf " [DONE]\n\n"

          echo "# Add Firewall rule to allow inbound TCP connection on local port 22"
            New-NetFirewallRule -Name zerotier -DisplayName 'zerotier' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

          echo "# Start the SSH server"
            net start BvSshServer

          echo "# Change the SSH user password"
            net user $env:UserName ${{ inputs.SSH_PASS }}
        }

    - name: Install and setup zerotier
      shell: bash
      run: |
        echo "# Install zerotier"
        if [ [ '${{ runner.os }}'=='Linux' ] || [ '${{ runner.os }}=='macOS' ] ]
        then
          curl -s https://install.zerotier.com | sudo bash
        fi
        if [ [ '${{ runner.os }}'=='Windows' ] ]
        then
          choco install zerotier-one
        fi

        echo "# Set zerotier with the given authentification token"
        if [ ! -z "${{ inputs.ZEROTIER_SECRET }}" ]
        then
          echo ${{ inputs.ZEROTIER_SECRET }} > $(eval echo ~$(cat config_path)/identity.secret)
        fi
        if [ ! -z "${{ inputs.ZEROTIER_PUBLIC }}" ]
        then
          echo ${{ inputs.ZEROTIER_PUBLIC }} > $(eval echo ~$(cat config_path)/identity.public)
        fi
        if [ ! -z "${{ inputs.ZEROTIER_AUTHTOKEN }}" ]
        then
          echo ${{ inputs.ZEROTIER_AUTHTOKEN }} > $(eval echo ~$(cat config_path)/authtoken.secret)
        fi

    - name: Start zerotier
      shell: bash
      run: |
        printf "# Starting zerotier..."
        printf " [DONE]\n\n"
        continue_path=$(eval echo ~$(cat ssh_user)/continue)
        time=${{ inputs.zerotier_TIMEOUT }}
        while [ ! -e $continue_path ] && [ $time -gt 1 ]
        do
          networks=$(zerotier-cli -listnetworks)
          peers=$(zerotier-cli -peers)
          listpeers=$(zerotier-cli -listpeers)
          echo ""
          echo "#########################################"
          echo "# zerotier listnetworks:"
          echo "#########################################"
          echo $networks
          echo "#########################################"
          echo "# zerotier peers:"
          echo "#########################################"
          echo $peers
          echo "#########################################"
          echo "# zerotier listpeers:"
          echo "#########################################"
          echo $listpeers
          echo "#########################################"
          echo "# Allow workflow to continue using:"
          echo "#########################################"
          echo "bash -c \"touch $continue_path\""
          echo "#########################################"
          echo "# SSH session time left:"
          echo "########################################"
          printf '#%-14s%dh:%02dm:%02ds%-14s#\n' '' $(($time/3600)) $(($time%3600/60)) $(($time%60)) ''
          echo "########################################"
          echo ""          
          sleep 60
          time=$((time-60))
        done
        echo "# SSH session terminated. Allowing workflow to continue..."
